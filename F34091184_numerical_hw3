import numpy as np
from math import cos, factorial

print("\n--------------------第一題--------------------")

x_vals_1 = np.array([0.698, 0.733, 0.768, 0.803])
y_vals_1 = np.array([0.7661, 0.7432, 0.7193, 0.6946])

x_target_1 = 0.750
true_val_1 = cos(x_target_1)

# 因只有4點，degree最多到3
degrees_to_test = [1, 2, 3]
print(f"\nTrue cos({x_target}) = {true_val:.6f}")

for deg in degrees_to_test:
    indices = np.argsort(np.abs(x_vals_1 - x_target_1))[:deg + 1]
    x_sel_1 = x_vals_1[indices]
    y_sel_1 = y_vals_1[indices]

    def lagrange_interp(x, x_pts, y_pts):
        total = 0
        n = len(x_pts)
        for i in range(n):
            term = y_pts[i]
            for j in range(n):
                if j != i:
                    term *= (x - x_pts[j]) / (x_pts[i] - x_pts[j])
            total += term
        return total

    y_interp_1 = lagrange_interp(x_target_1, x_sel_1, y_sel_1)
    error_1 = abs(true_val_1 - y_interp_1)

    # Suppose that M ≈ 1
    prod_term = np.prod([abs(x_target_1 - xi) for xi in x_sel_1])
    error_bound = prod_term / factorial(deg + 1)

    print(f"\nDegree = {deg}")
    print(f"  Approximation at x = {x_target_1}: {y_interp_1:.6f}")    
    print(f"  Error Bound = {error_bound:.6e}")

print("\nDegree = 4")
print("  因資料點僅有4點，故結果將與Degree = 3相同")

print()
print("\n--------------------第二題--------------------")

x_data_2 = np.array([0.3, 0.4, 0.5, 0.6])
y_data_2 = np.exp(-x_data_2)

def divided_differences(z, f):
    n = len(z)
    coef = np.copy(f)
    for j in range(1, n):
        coef[j:] = (coef[j:] - coef[j - 1:-1]) / (z[j:] - z[:n - j])
    return coef

def newton_poly(z_data, coef, y):
    n = len(coef)
    result = coef[0]
    product = 1.0
    for i in range(1, n):
        product *= (y - z_data[i - 1])
        result += coef[i] * product
    return result

def inverse_interp_local(y_data, x_data, y_target, num_points=3):
    idx = np.argsort(np.abs(y_data - y_target))[:num_points]
    z_sel = y_data[idx]
    f_sel = x_data[idx]
    coef = divided_differences(z_sel, f_sel)
    return newton_poly(z_sel, coef, y_target)

x0 = 0.565
max_iter = 50
tolerance = 1e-4

print("Iterated Inverse Interpolation:")
print("Step\tx_n\t\te^{-x_n}\t\tx_{n+1}")

for i in range(max_iter):
    y = np.exp(-x0) 
    x1 = inverse_interp_local(y_data_2, x_data_2, y, num_points=3)

    print(f"{i+1:>2}\t{x0:.10f}\t{y:.10f}\t{x1:.10f}")

    if abs(y - x0) < tolerance:
        print("\nConverged : x = "f"{x0:.4f}")
        break
    x0 = x1
